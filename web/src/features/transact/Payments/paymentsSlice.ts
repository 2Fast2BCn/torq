export const aaa = 1;
// import { createSlice, PayloadAction } from "@reduxjs/toolkit";
// import { ColumnMetaData } from "features/table/types";
// import { RootState } from "store/store";
// import { ViewInterface } from "features/viewManagement/types";
// import { torqApi } from "apiSlice";
// import { Payment } from "./types";
//
// export interface TablePaymentsState {
//   paymentViews: ViewInterface<Payment>[];
//   selectedViewIndex: number;
// }
//
//
// const initialState: TablePaymentsState = {
//   selectedViewIndex: 0,
//   paymentViews: [
//     {
//       ...DefaultView,
//       title: "Default View",
//     },
//   ],
// };
//
// export const paymentsSlice = createSlice({
//   name: "payments",
//   initialState,
//   reducers: {
//     updatePaymentsFilters: (state, actions: PayloadAction<{ filters: any }>) => {
//       state.paymentViews[state.selectedViewIndex].filters = actions.payload.filters;
//     },
//     updateColumns: (state, actions: PayloadAction<{ columns: ColumnMetaData<Payment>[] }>) => {
//       state.paymentViews[state.selectedViewIndex].columns = actions.payload.columns;
//     },
//     updateViews: (state, actions: PayloadAction<{ views: ViewInterface<Payment>[]; index: number }>) => {
//       state.paymentViews = actions.payload.views;
//       state.selectedViewIndex = actions.payload.index;
//     },
//     updateViewsOrder: (state, actions: PayloadAction<{ views: ViewInterface<Payment>[]; index: number }>) => {
//       state.paymentViews = actions.payload.views;
//       state.selectedViewIndex = actions.payload.index;
//     },
//     deleteView: (state, actions: PayloadAction<{ view: ViewInterface<Payment>; index: number }>) => {
//       state.paymentViews = [
//         ...state.paymentViews.slice(0, actions.payload.index),
//         ...state.paymentViews.slice(actions.payload.index + 1, state.paymentViews.length),
//       ];
//       state.selectedViewIndex = 0;
//     },
//     updateSelectedView: (state, actions: PayloadAction<{ index: number }>) => {
//       state.selectedViewIndex = actions.payload.index;
//     },
//   },
//   // The `extraReducers` field lets the slice handle actions defined elsewhere,
//   // including actions generated by createAsyncThunk or in other slices.
//   extraReducers: (builder) => {
//     builder.addMatcher(
//       (action) => {
//         return (
//           ["payments/updatePaymentsFilters", "payments/updateColumns"].findIndex((item) => action.type === item) !== -1
//         );
//       },
//       (state, _) => {
//         state.paymentViews[state.selectedViewIndex].saved = false;
//       }
//     );
//
//     builder.addMatcher(torqApi.endpoints.createTableView.matchFulfilled, (state, { payload }) => {
//       state.paymentViews[payload.index] = {
//         ...payload.view.view,
//         id: payload.view.id,
//       };
//       state.selectedViewIndex = payload.index;
//     });
//
//     builder.addMatcher(torqApi.endpoints.deleteTableView.matchFulfilled, (state, { payload }) => {
//       state.paymentViews = [
//         ...state.paymentViews.slice(0, payload.index),
//         ...state.paymentViews.slice(payload.index + 1, state.paymentViews.length),
//       ];
//       state.selectedViewIndex = 0;
//     });
//
//     builder.addMatcher(torqApi.endpoints.getTableViews.matchFulfilled, (state, { payload }) => {
//       if (payload !== null) {
//         state.paymentViews = payload.map((view: { id: number; view: ViewInterface<Payment> }) => {
//           return { ...view.view, id: view.id };
//         });
//       }
//     });
//
//     builder.addMatcher(torqApi.endpoints.updateTableView.matchFulfilled, (state, { payload }) => {
//       const view = state.paymentViews.find((v) => v.id === payload.id);
//       if (view) {
//         view.saved = true;
//       }
//     });
//   },
// });
//
// export const { updatePaymentsFilters, updateColumns, updateViews, updateViewsOrder, deleteView, updateSelectedView } =
//   paymentsSlice.actions;
//
// export const selectPaymentsFilters = (state: { payments: TablePaymentsState }) => {
//   return state.payments.paymentViews[state.payments.selectedViewIndex].filters;
// };
//
// export const selectActiveColumns = (state: { payments: TablePaymentsState }) => {
//   return state.payments.paymentViews[state.payments.selectedViewIndex].columns || [];
// };
//
// export const selectAllColumns = (_: { payments: TablePaymentsState }) => AllPaymentsColumns;
// export const selectViews = (state: { payments: TablePaymentsState }) => state.payments.paymentViews;
// export const selectCurrentView = (state: { payments: TablePaymentsState }) =>
//   state.payments.paymentViews[state.payments.selectedViewIndex];
// export const selectedViewIndex = (state: { payments: TablePaymentsState }) => state.payments.selectedViewIndex;
//
// export default paymentsSlice.reducer;
