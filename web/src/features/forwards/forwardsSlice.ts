export const a = 2;
// import { createSlice, PayloadAction } from "@reduxjs/toolkit";
// import { RootState } from "store/store";
// import { SortByOptionType } from "features/sidebar/sections/sort/SortSectionOld";
// import { torqApi } from "apiSlice";
// import { ColumnMetaData } from "features/table/types";
// import { availableColumns } from "./defaultView";
// import { ForwardResponse } from "types/api";
// import { ViewInterface } from "features/viewManagement/types";
//
// export interface TableState {
//   channels: [];
//   modChannels: [];
//   status: "idle" | "loading" | "failed";
// }
//
// const initialState: TableState = {
//   channels: [],
//   modChannels: [],
//   status: "idle",
// };
//
// export const forwardsSlice = createSlice({
//   name: "table",
//   initialState,
//   // The `reducers` field lets us define reducers and generate associated actions
//   reducers: {
//     updateFilters: (state, actions: PayloadAction<{ filters: any }>) => {
//       state.views[state.selectedViewIndex].filters = actions.payload.filters;
//     },
//     updateColumns: (state, actions: PayloadAction<{ columns: ColumnMetaData<ForwardResponse>[] }>) => {
//       state.views[state.selectedViewIndex].columns = actions.payload.columns;
//     },
//     updateGroupBy: (state, actions: PayloadAction<{ groupBy: string }>) => {
//       state.views[state.selectedViewIndex].groupBy = actions.payload.groupBy;
//     },
//     updateViews: (state, actions: PayloadAction<{ views: ViewInterface<ForwardResponse>[]; index: number }>) => {
//       state.views = actions.payload.views;
//       state.selectedViewIndex = actions.payload.index;
//     },
//     updateViewsOrder: (state, actions: PayloadAction<{ views: ViewInterface<ForwardResponse>[]; index: number }>) => {
//       state.views = actions.payload.views;
//       state.selectedViewIndex = actions.payload.index;
//     },
//     deleteView: (state, actions: PayloadAction<{ view: ViewInterface<ForwardResponse>; index: number }>) => {
//       state.views = [
//         ...state.views.slice(0, actions.payload.index),
//         ...state.views.slice(actions.payload.index + 1, state.views.length),
//       ];
//       state.selectedViewIndex = 0;
//     },
//     updateSelectedView: (state, actions: PayloadAction<{ index: number }>) => {
//       state.selectedViewIndex = actions.payload.index;
//     },
//     updateSortBy: (state, actions: PayloadAction<{ sortBy: SortByOptionType[] }>) => {
//       state.views[state.selectedViewIndex].sortBy = actions.payload.sortBy;
//     },
//   },
//   // The `extraReducers` field lets the slice handle actions defined elsewhere,
//   // including actions generated by createAsyncThunk or in other slices.
//   extraReducers: (builder) => {
//     builder.addMatcher(
//       (action) => {
//         return (
//           ["table/updateFilters", "table/updateSortBy", "table/updateColumns", "table/updateGroupBy"].findIndex(
//             (item) => action.type === item
//           ) !== -1
//         );
//       },
//       (state, _) => {
//         // TODO: create compare version to indicate it view is saved or not.
//         state.views[state.selectedViewIndex].saved = false;
//       }
//     );
//
//     builder.addMatcher(torqApi.endpoints.createTableView.matchFulfilled, (state, { payload }) => {
//       state.views[payload.index] = {
//         ...payload.view.view,
//         id: payload.view.id,
//       };
//       state.selectedViewIndex = payload.index;
//     });
//
//     builder.addMatcher(torqApi.endpoints.deleteTableView.matchFulfilled, (state, { payload }) => {
//       state.views = [
//         ...state.views.slice(0, payload.index),
//         ...state.views.slice(payload.index + 1, state.views.length),
//       ];
//       state.selectedViewIndex = 0;
//     });
//
//     builder.addMatcher(torqApi.endpoints.getTableViews.matchFulfilled, (state, { payload }) => {
//       if (payload !== null) {
//         state.views = payload.map((view: { id: number; view: ViewInterface<ForwardResponse> }) => {
//           return { ...view.view, id: view.id };
//         });
//       }
//     });
//
//     builder.addMatcher(torqApi.endpoints.updateTableView.matchFulfilled, (state, { payload }) => {
//       const view = state.views.find((v) => v.id === payload.id);
//       if (view) {
//         view.saved = true;
//       }
//     });
//   },
// });
//
// export const {
//   updateFilters,
//   updateViews,
//   updateViewsOrder,
//   deleteView,
//   updateSelectedView,
//   updateSortBy,
//   updateColumns,
//   updateGroupBy,
// } = forwardsSlice.actions;
//
// export const selectActiveColumns = (state: { table: TableState }) => {
//   return state.table.views[state.table.selectedViewIndex].columns || [];
// };
// export const selectAllColumns = (_: { table: TableState }) => availableColumns;
// export const selectSortBy = (state: { table: TableState }) => state.table.views[state.table.selectedViewIndex].sortBy;
// export const selectGroupBy = (state: { table: TableState }) => state.table.views[state.table.selectedViewIndex].groupBy;
// export const selectFilters = (state: { table: TableState }) => {
//   return state.table.views[state.table.selectedViewIndex].filters;
// };
// export const selectViews = (state: RootState) => state.table.views;
// export const selectCurrentView = (state: { table: TableState }) => state.table.views[state.table.selectedViewIndex];
// export const selectedViewIndex = (state: { table: TableState }) => state.table.selectedViewIndex;
// export const selectStatus = (state: { table: TableState }) => state.table.status;
//
// export default forwardsSlice.reducer;
