import { createSlice, PayloadAction } from "@reduxjs/toolkit";
import { RootState } from "store/store";
import { AndClause } from "features/sidebar/sections/filter/filter";
import { SortByOptionType } from "features/sidebar/sections/sort/SortSectionOld";
import { ColumnMetaData, ViewInterface } from "features/table/Table";
import { torqApi } from "apiSlice";

export const tagsColumns: ColumnMetaData[] = [
  {
    heading: "Checkbox",
    type: "CheckboxCell",
    key: "checkbox",
    valueType: "boolean",
  },
  {
    heading: "Name",
    type: "TextCell",
    key: "name",
    valueType: "string",
  },
];
export interface PolicyInterface {
  feeRatePpm: number;
  timeLockDelta: number;
  maxHtlcMsat: number;
  minHtlcMsat: number;
  baseFeeMsat: number;
  fundingTransactionHash: string;
  fundingOutputIndex: number;
  nodeId: number;
}
export interface TableChannelsState {
  channels: [];
  selectedViewIndex: number;
  views: ViewInterface[];
  status: "idle" | "loading" | "failed";
}

const defaultFilter = new AndClause();

export const activeTagsColumns = tagsColumns.filter((c) => ["name", "checkbox"].includes(c.key));

export const DefaultView: ViewInterface = {
  title: "Untitled View",
  saved: true,
  columns: activeTagsColumns,
  filters: defaultFilter.toJSON(),
  sortBy: [],
  page: "tags",
};

const initialState: TableChannelsState = {
  channels: [],
  selectedViewIndex: 0,
  views: [
    {
      ...DefaultView,
      title: "Default View",
    },
  ],
  status: "idle",
};

export const channelsSlice = createSlice({
  name: "channels",
  initialState,
  // The `reducers` field lets us define reducers and generate associated actions
  reducers: {
    updateFilters: (state, actions: PayloadAction<{ filters: any }>) => {
      state.views[state.selectedViewIndex].filters = actions.payload.filters;
    },
    updateColumns: (state, actions: PayloadAction<{ columns: Array<ColumnMetaData> }>) => {
      state.views[state.selectedViewIndex].columns = actions.payload.columns;
    },
    updateGroupBy: (state, actions: PayloadAction<{ groupBy: string }>) => {
      state.views[state.selectedViewIndex].groupBy = actions.payload.groupBy;
    },
    updateSortBy: (state, actions: PayloadAction<{ sortBy: SortByOptionType[] }>) => {
      state.views[state.selectedViewIndex].sortBy = actions.payload.sortBy;
    },
    updateViews: (state, actions: PayloadAction<{ views: ViewInterface[]; index: number }>) => {
      state.views = actions.payload.views;
      state.selectedViewIndex = actions.payload.index;
    },
    updateViewsOrder: (state, actions: PayloadAction<{ views: ViewInterface[]; index: number }>) => {
      state.views = actions.payload.views;
      state.selectedViewIndex = actions.payload.index;
    },
    deleteView: (state, actions: PayloadAction<{ view: ViewInterface; index: number }>) => {
      state.views = [
        ...state.views.slice(0, actions.payload.index),
        ...state.views.slice(actions.payload.index + 1, state.views.length),
      ];
      state.selectedViewIndex = 0;
    },
    updateSelectedView: (state, actions: PayloadAction<{ index: number }>) => {
      state.selectedViewIndex = actions.payload.index;
    },
  },
  // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slices.
  extraReducers: (builder) => {
    builder.addMatcher(
      (action) => {
        return (
          ["tags/updateFilters", "tags/updateSortBy", "tags/updateColumns"].findIndex(
            (item) => action.type === item
          ) !== -1
        );
      },
      (state, _) => {
        state.views[state.selectedViewIndex].saved = false;
      }
    );

    builder.addMatcher(torqApi.endpoints.createTableView.matchFulfilled, (state, { payload }) => {
      state.views[payload.index] = {
        ...payload.view.view,
        id: payload.view.id,
      };
      state.selectedViewIndex = payload.index;
    });

    builder.addMatcher(torqApi.endpoints.deleteTableView.matchFulfilled, (state, { payload }) => {
      state.views = [
        ...state.views.slice(0, payload.index),
        ...state.views.slice(payload.index + 1, state.views.length),
      ];
      state.selectedViewIndex = 0;
    });

    builder.addMatcher(torqApi.endpoints.getTableViews.matchFulfilled, (state, { payload }) => {
      if (payload !== null) {
        state.views = payload.map((view: { id: number; view: ViewInterface }) => {
          return { ...view.view, id: view.id };
        });
      }
    });

    builder.addMatcher(torqApi.endpoints.updateTableView.matchFulfilled, (state, { payload }) => {
      const view = state.views.find((v) => v.id === payload.id);
      if (view) {
        view.saved = true;
      }
    });
  },
});

export const {
  updateFilters,
  updateViews,
  updateViewsOrder,
  deleteView,
  updateSelectedView,
  updateSortBy,
  updateColumns,
  updateGroupBy,
} = channelsSlice.actions;

export const selectActiveColumns = (state: RootState) => {
  return state.channels.views[state.channels.selectedViewIndex].columns || [];
};
export const selectAllColumns = (_: RootState) => tagsColumns;
export const selectSortBy = (state: RootState) => state.channels.views[state.channels.selectedViewIndex].sortBy;
export const selectFilters = (state: RootState) => {
  return state.channels.views[state.channels.selectedViewIndex].filters;
};
export const selectViews = (state: RootState) => state.channels.views;
export const selectCurrentView = (state: RootState) => state.channels.views[state.channels.selectedViewIndex];
export const selectedViewIndex = (state: RootState) => state.channels.selectedViewIndex;

export default channelsSlice.reducer;
