DROP TABLE channel_tag;
DROP TABLE corridor;
DROP TABLE tag;

CREATE TABLE category (
    category_id SERIAL PRIMARY KEY,
    name TEXT NOT NULL,
    style TEXT NOT NULL,
    created_on TIMESTAMPTZ NOT NULL,
    updated_on TIMESTAMPTZ NOT NULL,
    UNIQUE (name)
);

CREATE TABLE tag (
    tag_id SERIAL PRIMARY KEY,
    category_id INTEGER REFERENCES category(category_id),
    name TEXT NOT NULL,
    style TEXT NOT NULL,
    created_on TIMESTAMPTZ NOT NULL,
    updated_on TIMESTAMPTZ NOT NULL,
    UNIQUE (name)
);

-- channel organically fills local balance
INSERT INTO category (category_id, name, style, created_on, updated_on)
VALUES (-1, 'source', 'source', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP);
-- channel organically fills and drains local balance
INSERT INTO category (category_id, name, style, created_on, updated_on)
VALUES (-2, 'router', 'router', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP);
-- channel organically drains local balance
INSERT INTO category (category_id, name, style, created_on, updated_on)
VALUES (-3, 'drain', 'drain', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP);
-- channel is with a merchant
INSERT INTO category (category_id, name, style, created_on, updated_on)
VALUES (-4, 'merchant', 'merchant', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP);
-- channel is with an exchange
INSERT INTO category (category_id, name, style, created_on, updated_on)
VALUES (-5, 'exchange', 'exchange', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP);
-- channel is with a wallet
INSERT INTO category (category_id, name, style, created_on, updated_on)
VALUES (-6, 'wallet', 'wallet', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP);

-- free channel
INSERT INTO tag (tag_id, name, style, created_on, updated_on)
VALUES (-1, 'free', 'free', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP);
-- cheap to rebalance
INSERT INTO tag (tag_id, name, style, created_on, updated_on)
VALUES (-2, 'cheap', 'cheap', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP);
-- normal cost to rebalance
INSERT INTO tag (tag_id, name, style, created_on, updated_on)
VALUES (-3, 'normal', 'normal', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP);
-- expensive cost to rebalance
INSERT INTO tag (tag_id, name, style, created_on, updated_on)
VALUES (-4, 'expensive', 'expensive', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP);
-- channel confirmation lower then x blocks ago
INSERT INTO tag (tag_id, name, style, created_on, updated_on)
VALUES (-5, 'new', 'new', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP);
-- has not forwarded in sliding window
INSERT INTO tag (tag_id, name, style, created_on, updated_on)
VALUES (-6, 'idle', 'idle', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP);
-- local balance to low
INSERT INTO tag (tag_id, name, style, created_on, updated_on)
VALUES (-7, 'drained', 'drained', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP);
-- local balance to high
INSERT INTO tag (tag_id, name, style, created_on, updated_on)
VALUES (-8, 'sourced', 'sourced', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP);
-- channel hits insufficient balance error when drained with a higher price
INSERT INTO tag (tag_id, name, style, created_on, updated_on)
VALUES (-9, 'insufficient', 'insufficient', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP);

-- No updated_on because table will never be updated only insert/delete.
CREATE TABLE channel_group (
  channel_tag_id SERIAL PRIMARY KEY,
  node_id INTEGER NOT NULL REFERENCES node(node_id),
  channel_id INTEGER NOT NULL REFERENCES channel(channel_id),
  tag_origin_id INTEGER NOT NULL,
  category_id INTEGER REFERENCES category(category_id),
  tag_id INTEGER REFERENCES tag(tag_id),
  created_on TIMESTAMPTZ NOT NULL,
  UNIQUE (channel_id, category_id, tag_id)
);


CREATE TABLE corridor (
  corridor_id SERIAL PRIMARY KEY,
  corridor_type_id INTEGER NOT NULL,
  reference_id INTEGER,
  flag INTEGER NOT NULL,
  inverse BOOLEAN NOT NULL,
  priority INTEGER NOT NULL,
  from_category_id INTEGER NULL REFERENCES category(category_id),
  from_tag_id INTEGER NULL REFERENCES tag(tag_id),
  from_node_id INTEGER NULL REFERENCES node(node_id),
  to_category_id INTEGER NULL REFERENCES category(category_id),
  to_tag_id INTEGER NULL REFERENCES tag(tag_id),
  to_node_id INTEGER NULL REFERENCES node(node_id),
  channel_id INTEGER NULL REFERENCES channel(channel_id),
  created_on TIMESTAMPTZ NOT NULL,
  updated_on TIMESTAMPTZ NOT NULL
);

--TODO FIXME doesn't work in current postgres (it will work in the next version: 15)
--ALTER TABLE corridor ADD CONSTRAINT corridor_unique UNIQUE NULLS NOT DISTINCT (corridor_type_id,reference_id,inverse,node_id,from_category_id,from_tag_id,...);

--PERFORMANCE BOOSTERS:
