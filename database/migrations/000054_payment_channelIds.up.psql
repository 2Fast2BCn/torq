
ALTER TABLE payment ADD COLUMN incoming_channel_id INTEGER;
ALTER TABLE payment ADD COLUMN outgoing_channel_id INTEGER;
ALTER TABLE payment ADD COLUMN rebalance_amount_msat NUMERIC;

--SELECT ic.channel_id, oc.channel_id, (p.htlcs->-1->'route'->'hops'->0->>'amt_to_forward_msat')::numeric
--FROM payment p
--JOIN channel ic on ic.lnd_short_channel_id=((p.htlcs->-1->'route'->'hops'->-1->>'chan_id')::numeric)
--JOIN channel oc on oc.lnd_short_channel_id=((p.htlcs->-1->'route'->'hops'->0->>'chan_id')::numeric)
--WHERE incoming_channel_id IS NULL OR outgoing_channel_id;

UPDATE payment p1
SET incoming_channel_id=ic.channel_id
FROM channel ic
WHERE ic.lnd_short_channel_id=((p1.htlcs->-1->'route'->'hops'->-1->>'chan_id')::numeric) AND p1.incoming_channel_id IS NULL;

UPDATE payment p1
SET outgoing_channel_id=oc.channel_id
FROM channel oc
WHERE oc.lnd_short_channel_id=((p1.htlcs->-1->'route'->'hops'->0->>'chan_id')::numeric) AND p1.outgoing_channel_id IS NULL;

UPDATE payment p1
SET rebalance_amount_msat=(p2.htlcs->-1->'route'->'hops'->0->>'amt_to_forward_msat')::numeric
FROM payment p2
WHERE p1.creation_timestamp=p2.creation_timestamp AND p1.payment_index=p2.payment_index AND p2.incoming_channel_id IS NULL;

ALTER TABLE payment ADD CONSTRAINT fk_payment_incoming_channel_id FOREIGN KEY (incoming_channel_id) REFERENCES channel(channel_id);
ALTER TABLE payment ADD CONSTRAINT fk_payment_outgoing_channel_id FOREIGN KEY (outgoing_channel_id) REFERENCES channel(channel_id);
