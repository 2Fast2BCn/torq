
CREATE TABLE workflow (
    workflow_id SERIAL PRIMARY KEY,
    name TEXT NOT NULL,
    type INTEGER NOT NULL,
    status INTEGER NOT NULL,
    created_on TIMESTAMPTZ NOT NULL,
    updated_on TIMESTAMPTZ NOT NULL,
    UNIQUE (name)
);

CREATE TABLE workflow_version (
    workflow_version_id SERIAL PRIMARY KEY,
    version INTEGER NOT NULL,
    status INTEGER NOT NULL,
    created_on TIMESTAMPTZ NOT NULL,
    updated_on TIMESTAMPTZ NOT NULL,
    workflow_id INTEGER NOT NULL REFERENCES workflow(workflow_id),
    UNIQUE (workflow_id, version)
);

CREATE TABLE workflow_version_node (
    workflow_version_node_id SERIAL PRIMARY KEY,
    name TEXT NOT NULL,
    status INTEGER NOT NULL,
    type INTEGER NOT NULL,
    parameters JSONB NOT NULL,
    visibility_settings JSONB NOT NULL,
    workflow_version_id INTEGER NOT NULL REFERENCES workflow_version(workflow_version_id),
    created_on TIMESTAMPTZ NOT NULL,
    updated_on TIMESTAMPTZ NOT NULL
);

CREATE TABLE workflow_version_node_link (
    workflow_version_node_link_id SERIAL PRIMARY KEY,
    visibility_settings JSONB NOT NULL,
    parent_parameter_index INTEGER NOT NULL,
    parent_workflow_version_node_id INTEGER NOT NULL REFERENCES workflow_version_node(workflow_version_node_id),
    child_parameter_index INTEGER NOT NULL,
    child_workflow_version_node_id INTEGER NOT NULL REFERENCES workflow_version_node(workflow_version_node_id),
    created_on TIMESTAMPTZ NOT NULL,
    updated_on TIMESTAMPTZ NOT NULL,
    UNIQUE (parent_workflow_version_node_id, parent_parameter_index, child_workflow_version_node_id, child_parameter_index)
);

CREATE TABLE workflow_version_node_log (
    --A unique reference to the automated process (thread/routine) so logs can be bundled together for a single process
    trigger_reference TEXT NOT NULL,
    input_data JSONB NOT NULL,
    output_data JSONB NOT NULL,
    debug_data TEXT NOT NULL,
    error_data TEXT NOT NULL,
    workflow_version_node_id INTEGER NOT NULL REFERENCES workflow_version_node(workflow_version_node_id),
    triggered_workflow_version_node_id INTEGER NOT NULL REFERENCES workflow_version_node(workflow_version_node_id),
    created_on TIMESTAMPTZ NOT NULL
);

SELECT create_hypertable('workflow_version_node_log','created_on');


SELECT wfvn.workflow_version_node_id
FROM workflow_version_node wfvn
JOIN workflow_version wfv ON wfv.workflow_version_id = wfvn.workflow_version_id AND wfv.status=1
JOIN workflow wf ON wf.workflow_id = wfv.workflow_id AND wfv.status=1
LEFT JOIN workflow_version_node_link parentLink ON parentLink.child_workflow_version_node_id = wfvn.workflow_version_node_id
WHERE wfvn.status=1 AND wfvn.type IN (0,1) AND parentLink.child_workflow_version_node_id IS NULL AND wfv.workflow_version_id IN (
    SELECT ranked.workflow_version_id
    FROM (
        SELECT v_wfv.workflow_version_id, RANK() OVER (PARTITION BY v_wfv.workflow_version_id ORDER BY version DESC) version_rank
        FROM workflow_version v_wfv
    ) ranked
    WHERE ranked.version_rank = 1
)

